import java.util.Arrays;

public class Hoares_Algorithm
{
	
	public class keyComparisons {
		public static int numOFComp=0;
	}
	
	
    public static void swap (int[] arr, int i, int j)
    {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
 
    // Partition using Hoare's Partitioning scheme
    public static int partition(int[] a, int low, int high)
    {
        int pivot = a[low];
        int i = low - 1;
        int j = high + 1;
 
        while (true)
        {
            do {
                i++;
            } while (a[i] < pivot);
 
            do {
                j--;
            } while (a[j] > pivot);
 
            if (i >= j) {
            	keyComparisons.numOFComp++;
                return j;
            }
            
            swap(a, i, j);
            keyComparisons.numOFComp++;
        }
        
    }
 
    // Quicksort routine
    public static void quicksort(int[] a, int low, int high)
    {
        // base condition
        if (low >= high) {
       	//keyComparisons.numOFComp++;
            return;
        }
 
        // rearrange elements across pivot
        int pivot = partition(a, low, high);
 
        // recur on subarray containing elements less than the pivot
        quicksort(a, low, pivot);
 
        // recur on subarray containing elements more than the pivot
        quicksort(a, pivot + 1, high);
    }
 
    public static void main(String[] args)
    {
    	
        int[] a = { 1,1,1,1,1};
 
        quicksort(a, 0, 4);
 
        // print the sorted array
        System.out.println(Arrays.toString(a));
        System.out.println(keyComparisons.numOFComp);
    }
}
